Traceback (most recent call last):
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import psycopg2
import pymysql
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.neighbors import NearestNeighbors

def get_pg_data():
    conn = psycopg2.connect(
        host="pg-292ef6f0-postgesql.d.aivencloud.com",
        user="avnadmin",
        password="AVNS_iFCt7xp02vTczdlhooY",
        database="defaultdb",
        port=16905
    )
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM firmandani.postgree")
    data = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    cursor.close()
    conn.close()
    return pd.DataFrame(data, columns=columns)

def get_mysql_data():
    conn = pymysql.connect(
        host="mysql-ef66224-mmsql.d.aivencloud.com",
        user="avnadmin",
        password="AVNS_NrOpqQJhytxwdcC6shv",
        database="defaultdb",
        port=21910
    )
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM flowers")
    data = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    cursor.close()
    conn.close()
    return pd.DataFrame(data, columns=columns)

# Ambil data dari kedua database
df_postgresql = get_pg_data()
df_mysql = get_mysql_data()

# Gabungkan berdasarkan kolom 'id'
df_merged = pd.merge(df_mysql, df_postgresql, on=["id", "class"], how="inner")

# Ambil data fitur numerik
feature_columns = ["petal_length", "petal_width", "sepal_length", "sepal_width"]
data_values = df_merged[feature_columns].values

# KNN Outlier Detection
def knn_outlier_detection(data, k=5):
    neigh = NearestNeighbors(n_neighbors=k)
    neigh.fit(data)
    distances, _ = neigh.kneighbors(data)
    avg_distances = distances[:, -1]  # Ambil jarak k-terjauh sebagai skor
    return avg_distances

# Hitung K-NN distance
df_merged["knn_distance"] = knn_outlier_detection(data_values, k=5)

# Tentukan threshold sebagai nilai rata-rata + 2 standar deviasi
threshold = df_merged["knn_distance"].mean() + 2 * df_merged["knn_distance"].std()
df_merged["outlier_knn"] = df_merged["knn_distance"] > threshold

# Cetak hasil
df_result = df_merged[["id", "class", "petal_length", "petal_width", "sepal_length", "sepal_width", "knn_distance", "outlier_knn"]]
print(df_result.to_string(index=False))
num_outliers = df_merged["outlier_knn"].sum()
print(f"\nJumlah outlier: {num_outliers}")

# Cetak data outlier
outliers = df_merged[df_merged["outlier_knn"]]
print("\nData Outlier:")
print(outliers.to_string(index=False))

# Visualisasi outlier berdasarkan K-NN
plt.figure(figsize=(8, 6))
sns.scatterplot(
    x=df_merged["sepal_length"], y=df_merged["sepal_width"],
    hue=df_merged["outlier_knn"], palette={False: "blue", True: "red"}
)
plt.title("Outlier Detection (Sepal) - KNN")
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(
    x=df_merged["petal_length"], y=df_merged["petal_width"],
    hue=df_merged["outlier_knn"], palette={False: "blue", True: "red"}
)
plt.title("Outlier Detection (Petal) - KNN")
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
[0;32m/tmp/ipykernel_4691/89493596.py[0m in [0;36m?[0;34m()[0m
[1;32m     42[0m [0mdf_postgresql[0m [0;34m=[0m [0mget_pg_data[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     43[0m [0mdf_mysql[0m [0;34m=[0m [0mget_mysql_data[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     44[0m [0;34m[0m[0m
[1;32m     45[0m [0;31m# Gabungkan berdasarkan kolom 'id'[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 46[0;31m [0mdf_merged[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mmerge[0m[0;34m([0m[0mdf_mysql[0m[0;34m,[0m [0mdf_postgresql[0m[0;34m,[0m [0mon[0m[0;34m=[0m[0;34m[[0m[0;34m"id"[0m[0;34m,[0m [0;34m"class"[0m[0;34m][0m[0;34m,[0m [0mhow[0m[0;34m=[0m[0;34m"inner"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     47[0m [0;34m[0m[0m
[1;32m     48[0m [0;31m# Ambil data fitur numerik[0m[0;34m[0m[0;34m[0m[0m
[1;32m     49[0m [0mfeature_columns[0m [0;34m=[0m [0;34m[[0m[0;34m"petal_length"[0m[0;34m,[0m [0;34m"petal_width"[0m[0;34m,[0m [0;34m"sepal_length"[0m[0;34m,[0m [0;34m"sepal_width"[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m

[0;32m~/.local/lib/python3.12/site-packages/pandas/core/reshape/merge.py[0m in [0;36m?[0;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)[0m
[1;32m    166[0m             [0mvalidate[0m[0;34m=[0m[0mvalidate[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    167[0m             [0mcopy[0m[0;34m=[0m[0mcopy[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    168[0m         [0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    169[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 170[0;31m         op = _MergeOperation(
[0m[1;32m    171[0m             [0mleft_df[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    172[0m             [0mright_df[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    173[0m             [0mhow[0m[0;34m=[0m[0mhow[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/.local/lib/python3.12/site-packages/pandas/core/reshape/merge.py[0m in [0;36m?[0;34m(self, left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, indicator, validate)[0m
[1;32m    790[0m             [0mself[0m[0;34m.[0m[0mright_join_keys[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    791[0m             [0mself[0m[0;34m.[0m[0mjoin_names[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    792[0m             [0mleft_drop[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    793[0m             [0mright_drop[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 794[0;31m         [0;34m)[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_get_merge_keys[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    795[0m [0;34m[0m[0m
[1;32m    796[0m         [0;32mif[0m [0mleft_drop[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    797[0m             [0mself[0m[0;34m.[0m[0mleft[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mleft[0m[0;34m.[0m[0m_drop_labels_or_levels[0m[0;34m([0m[0mleft_drop[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/.local/lib/python3.12/site-packages/pandas/core/reshape/merge.py[0m in [0;36m?[0;34m(self)[0m
[1;32m   1293[0m                         [0;31m# Then we're either Hashable or a wrong-length arraylike,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1294[0m                         [0;31m#  the latter of which will raise[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1295[0m                         [0mrk[0m [0;34m=[0m [0mcast[0m[0;34m([0m[0mHashable[0m[0;34m,[0m [0mrk[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1296[0m                         [0;32mif[0m [0mrk[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1297[0;31m                             [0mright_keys[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0mright[0m[0;34m.[0m[0m_get_label_or_level_values[0m[0;34m([0m[0mrk[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1298[0m                         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1299[0m                             [0;31m# work-around for merge_asof(right_index=True)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1300[0m                             [0mright_keys[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0mright[0m[0;34m.[0m[0mindex[0m[0;34m.[0m[0m_values[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/.local/lib/python3.12/site-packages/pandas/core/generic.py[0m in [0;36m?[0;34m(self, key, axis)[0m
[1;32m   1907[0m             [0mvalues[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mxs[0m[0;34m([0m[0mkey[0m[0;34m,[0m [0maxis[0m[0;34m=[0m[0mother_axes[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m)[0m[0;34m.[0m[0m_values[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1908[0m         [0;32melif[0m [0mself[0m[0;34m.[0m[0m_is_level_reference[0m[0;34m([0m[0mkey[0m[0;34m,[0m [0maxis[0m[0;34m=[0m[0maxis[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1909[0m             [0mvalues[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0maxes[0m[0;34m[[0m[0maxis[0m[0;34m][0m[0;34m.[0m[0mget_level_values[0m[0;34m([0m[0mkey[0m[0;34m)[0m[0;34m.[0m[0m_values[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1910[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1911[0;31m             [0;32mraise[0m [0mKeyError[0m[0;34m([0m[0mkey[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1912[0m [0;34m[0m[0m
[1;32m   1913[0m         [0;31m# Check for duplicates[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1914[0m         [0;32mif[0m [0mvalues[0m[0;34m.[0m[0mndim[0m [0;34m>[0m [0;36m1[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mKeyError[0m: 'class'

